实习报告
题目：车厢调度问题，设计一个函数，求出所有可能的车厢输出序列
班级:电信1808班 姓名:蒙志弘    学号:U201813469  完成日期:2018.04.08
一，需求分析
1.程序设计目的是通过递归的办法来求出所有可能的车厢输出序列。
2.程序运行开始会要求用户输入所要调度的车厢总数，输入方式采用scanf函数。
3.相应的输出结果打印在输入的车厢总数下面。
4.程序的执行命令包括：1）栈的构建2）栈的进栈操作以及出栈操作3）栈是否为空的判断4）求出所有可能的车厢序列。
5.测试数据
   车箱数n=2  输出序列=“2 1”，“1 2”.
   车箱数n=3  输出序列=“3 2 1”，“2 3 1”，“2 1 3”，“1 3 2”，“1 2 3”.
二．概要设计
为实现上述程序功能，先在主函数构建一个栈，栈的大小由宏观变量Maxlen决定，在主函数输入车箱数。
1.基本操作
Initstack(&s)
操作结果：构建一个空栈。
push(&s,q)
初始条件:s已存在
操作结果:插入元素q成为新的栈顶元素
pop(&s,temp)
初始条件:栈已存在且栈非空
操作结果:将栈顶元素弹出，用e返回他的值
empty()
操作结果:判断栈是否为空，是返回-1，不是返回0.
process(num,path[],curp)
操作结果:求出所有序列，从下至上打印
2.主程序
Int main(){
Int path[Maxlen]
输入车箱数
构建栈
第一节车厢进栈
递归求出所有序列
}
3.主要的函数
process(num,path[],curp){
If{
    下一节车厢进栈
     下一车厢递归
     下一车厢不进栈
}
If{
    当前车厢出栈
    下一车厢递归
    当前车厢不出栈
}
打印序列
}
三，详细设计
struct Stack{
   int data[Maxlen];
   int top;
}s;
Int n;
Void Innitstack()
Void Push()
Int Pop()
Int Empty()
Void process(int num,int path[],int curp){
If(num<n){
   Push(num+1);
   Process(num+1,path,curp);
   Pop();
}
if(!Emptys())                           
    {
        temp=pop();
        path[curp]=temp;
        curp++;
        process(num,path,curp);          

        push(temp);                         
    }
if(num==n&&Emptys())                     
    {
        for(i=0;i<curp;i++)
            printf("%2d",path[i]);
        printf("\n");
    }
}//process
void main(){
Int path[maxlen]
Scanf(n);
Initstack()
Push(1)
Printf(所有序列)
Process()
}//main
四，调试分析
1.对于函数process的处理，开始时将下一车厢进栈和当前车厢出栈的情况放在了if语句外面，导致函数的递归陷入死循环。
2.在输入数据时漏掉了’&’标识符，导致输入数据不成功，调试时正确补上。
3.经验体会:递归函数的重要性，递归函数可以处理很多的相同规模的问题，例如汉诺塔问题。
五，用户说明
运行程序时，只需要输入需要处理的车箱数。
六，测试结果
1.n=2,
   “2 1”，”1 2”.
2.n=3，
   “3 2 1”，“2 3 1”，“2 1 3”，“1 3 2”，“1 2 3”.
